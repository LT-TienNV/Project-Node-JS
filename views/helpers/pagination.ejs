<%
    paginationHelpers = (paginationObj, type, curentStatus, keyword) => {
        let totalItems          = paginationObj.totalItems;
        let totalItemsPerPage   = paginationObj.totalItemsPerPage;
        let totalPages          = Math.ceil(totalItems/totalItemsPerPage); 
        let curentPage          = paginationObj.curentPage;
        let pageRanges          = paginationObj.pageRanges;
        let to                  = totalItemsPerPage * curentPage; 
        let from                = to - totalItemsPerPage + 1;
        let xhtmlPagination     = '';
        if( to > totalItems ) to = totalItems;   
        if ( totalPages > 1 ){
            let xhtmlStart       = '<li class="disabled"><a><<</a></li>';
            let xhtmlNext        = '<li class="disabled"><a href="">></a></li>';
            let xhtmlPages       = '';
            let xhtmlPrevious    = '<li class="disabled"><a><</a></li>';
            let xhtmlEnd         = '<li class="disabled"><a href="">>></a></li>';
            let link             = systemConfig.prefixAdmin + '/' + type + '/' + curentStatus ;
            if( keyword !== '' ) link += '?keyword=' + keyword + '&page=';
            else link += '?page=';

            if( curentPage > 1 ){
                xhtmlStart      = `<li><a href="${link}" target="_self"><<</a></li>`;
                xhtmlPrevious   = `<li><a href="${link}${ curentPage - 1 }" target="_self"><</a></li>`;
            }
            if( curentPage < totalPages ){
                xhtmlEnd        = `<li><a href="${link}${totalPages}" target="_self">>></a></li>`;
                xhtmlNext       = `<li><a href="${link}${ curentPage + 1 }" target="_self">></a></li>`;
            }

            let middle  = Math.ceil( pageRanges/2 )
            let min     = curentPage - middle + 1;
            let max     = min + pageRanges - 1;
            if( min <= 1 ){
                min = 1;
                max = pageRanges;
            }
            if( max >= totalPages ){
                max = totalPages;
                min = ((max - pageRanges + 1) >= 1 ) ? ( max - pageRanges + 1 ) : 1;
            }

            for( let i = min; i <= max; i++ ){
                if( i == curentPage ) {
                    xhtmlPages += `<li class="active"><a>${i}</a></li>`;
                } else {
                    xhtmlPages += `<li><a href="${link}${i}" target="_self">${i}</a></li>`;
                }
            }

            xhtmlPagination = '<ul class="pagination text-center">' + xhtmlStart + xhtmlPrevious + xhtmlPages + xhtmlNext + xhtmlEnd + '</ul>';
        }

        return `<div class="panel panel-info" id="pagination">
                    <div class="panel-heading">Pagination<span class="label label-warning">Total pages: ${totalPages}</span><span class="label label-danger">Total entries: ${totalItems}</span></div>
                    <div class="panel-body">
                        <div class="infor-pagination">
                            <p>Number of elements on the page: <span>${totalItemsPerPage}</span></p>
                            <p>Showing <span> ${from} </span> to <span>${to}</span> of <span>${totalItems}</span> entries</p>
                        </div>
                        <div class="ad-pagination">
                            ${xhtmlPagination}
                        </div>
                    </div>
                </div>`;
      
    }
%>